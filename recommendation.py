# -*- coding: utf-8 -*-
"""recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/recommendation-ee7ffee2-15d7-423d-b534-736719e2690c.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250314/auto/storage/goog4_request%26X-Goog-Date%3D20250314T172815Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Da332e093135a3d194f9c4b1be019a8193cb16f6214d5d981bbc9783c9f82b63a43317bc71debb7054d456b73f1943adc86b298eeaef95b48c0043d29524cf8cb14ed1690b3196b87d45e20539ecdd5bdf89d2f77bbc512389319b1b785d9996cf3462a5a89993bd48dc12798f01b39911b79e73bfb0ef1ff752bf63b68e8c817131b938e5a8af992da246a311935896154f3261f3cdc5c84ea875e8396f04676e549e80b0c342a2311d2bba5576f4a7b168781a4619a364e0650b64088b5c067b14b8fdad10e2ab8dbe51de7e82f0a3d81b5f91af95b126674c6a2acdb58bbc27e6fb4400e7519cf4a0b536e9d37a8f657291c3f5a25ea8c26288f3dc427cbde
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
organizations_uciml_restaurant_data_with_consumer_ratings_path = kagglehub.dataset_download('organizations/uciml/restaurant-data-with-consumer-ratings')
keshavramaiah_hotel_recommendation_path = kagglehub.dataset_download('keshavramaiah/hotel-recommendation')
hernan4444_animeplanet_recommendation_database_2020_path = kagglehub.dataset_download('hernan4444/animeplanet-recommendation-database-2020')
patriciabrezeanu_movielens_full_25_million_recommendation_data_path = kagglehub.dataset_download('patriciabrezeanu/movielens-full-25-million-recommendation-data')

print('Data source import complete.')

"""# Data Loading"""

import pandas as pd

room_attributes = pd.read_csv('/kaggle/input/hotel-recommendation/Hotel_Room_attributes.csv')
hotel_details = pd.read_csv('/kaggle/input/hotel-recommendation/Hotel_details.csv')

print('Jumlah data atribut kamar hotel:', len(room_attributes))
print('Jumlah data hotel:', len(hotel_details['hotelid'].unique()))

"""# Univariate Exploratory Data Analysis"""

room_attributes.info()

room_attributes.head()

"""### Fitur pada Dataset Hotel Room Atribut  
1. **id** (`int64`)  
   ID unik untuk setiap kamar yang tersedia dalam dataset.  

2. **hotelcode** (`int64`)  
   Kode unik untuk mengidentifikasi hotel tempat kamar tersebut berada.  

3. **roomamenities** (`object`)  
   Daftar fasilitas atau kelengkapan kamar, seperti AC, Wi-Fi, dan TV.  

4. **roomtype** (`object`)  
   Jenis kamar yang tersedia, seperti **Standard Room, Deluxe Room, Suite**, dll.  

5. **ratedescription** (`object`)  
   Deskripsi rating kamar berdasarkan kategori tertentu.  
"""

hotel_details.info()

hotel_details.head()

"""### Fitur pada Dataset Hotel Details
1. **id** (`int64`)  
   ID unik untuk setiap hotel dalam dataset.  

2. **hotelcode** (`int64`)  
   Kode unik hotel yang dapat digunakan untuk menghubungkan dataset kamar dan hotel.  

3. **hotelname** (`object`)  
   Nama hotel, seperti **Grand Hotel, Sunset Resort, dll.**  

4. **address** (`object`)  
   Alamat lengkap hotel, yang dapat mencakup **jalan, nomor, dan kawasan**.  

5. **city** (`object`)  
    Kota tempat hotel tersebut berada, seperti **Jakarta, Bali, Tokyo, dll.**  

6. **country** (`object`)  
    Negara tempat hotel berada, seperti **Indonesia, Jepang, Amerika Serikat, dll.**  

7. **zipcode** (`float64`)  
    Kode pos lokasi hotel.  

8. **propertytype** (`object`)  
    Jenis properti hotel, seperti **Hotel, Guesthouse, Hostel, Villa**, dll.  

9. **starrating** (`int64`)  
    Rating bintang hotel (misalnya **3, 4, atau 5 bintang**).  

10. **latitude** (`float64`)  
    Koordinat **lintang** lokasi hotel dalam derajat desimal.  
    - **Nilai positif** → Belahan bumi utara (N).  
    - **Nilai negatif** → Belahan bumi selatan (S).  

11. **longitude** (`float64`)  
    Koordinat **bujur** lokasi hotel dalam derajat desimal.  
    - **Nilai positif** → Belahan bumi timur (E).  
    - **Nilai negatif** → Belahan bumi barat (W).  

12. **Source** (`int64`)  
    Sumber data hotel, yang mungkin digunakan untuk tracking data dari berbagai platform.  

13. **url** (`object`)  
    URL halaman pemesanan hotel atau informasi resmi.  

14. **curr** (`object`)  
    Mata uang yang digunakan untuk harga kamar hotel, seperti **IDR, USD, EUR**, dll.

# Data Preprocessing
"""

hotel_details.rename(columns = {'hotelid':'hotelcode'},inplace = True)

"""Mengubah variabel `hotelid` di dataset hotel_details menjadi `hotelcode` agar seragam dengan diberi nama df_merged"""

df_merged = room_attributes.merge(hotel_details, on='hotelcode', how='left')

"""Menggabungkan dataset room_attributes dengan hotel_details berdasarkan `hotelcode`"""

df_merged.shape

"""Setelah digabungkan (merge) jumlah dataset menjadi 181415 sampel dengan 18 variabel/fitur"""

df_cleaned = df_merged[[
    'hotelname', 'roomtype',
    'city', 'country'
]]

"""Mengambil variabel 'hotelname', 'roomtype', 'city', 'country', yang akan digunakan untuk membangun sistem rekomendasi"""

df_cleaned.head()

"""# Data Preparation

## Check missing values
"""

df_cleaned.isnull().sum()

df.shape

"""## Check Duplicated Values"""

df.duplicated().sum()

"""ada 131919 nilai yang terduplikasi

## Handling Duplicated Values
"""

df.drop_duplicates(inplace = True)
df.shape

"""menghapus data yang terduplikasi. Sehingga dataset berkurang menjadi 49496

## Cleaning and Concat Dataset values
"""

import re

def clean_text(text):
    text = re.sub(r'[:;]', '', text)  # Hapus karakter ": ;"
    text = text.lower().strip()  # Ubah ke lowercase dan hapus spasi
    return text

# Cleaning setiap kolom
df['hotelname'] = df['hotelname'].apply(clean_text)
df['roomtype'] = df['roomtype'].apply(clean_text)
df['city'] = df['city'].apply(clean_text)
df['country'] = df['country'].apply(clean_text)

df['tags'] = df['hotelname'] + ' ' + df['roomtype'] + ' ' + df['city'] + ' ' + df['country']

"""semua fitur menjadi satu yaitu fitur `tags`. Fitur `tags` akan menjadi fitur utama yang selanjutnya diolah untuk menjadi dasar sistem rekomendasi hotel."""

df.head()

"""# Modeling

menggunakan Content-Based Filtering untuk mencari similarity antara hotel, tipe kamar dan dan lokasi hotel

## Feature Extraction
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD

tfidf = TfidfVectorizer(max_features=1000, stop_words='english')

tfidf_matrix = tfidf.fit_transform(df['tags'])

svd = TruncatedSVD(n_components=1000)
reduced_matrix = svd.fit_transform(tfidf_matrix)

"""- TF-IDF mengubah teks menjadi vektor numerik berbobot berdasarkan frekuensi kata.
- Truncated SVD (LSA) mereduksi dimensi agar lebih efisien tanpa kehilangan banyak informasi.

## Content-Based Filtering with Cosine Similarity
"""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(reduced_matrix)
cosine_sim

"""cosine similarity digunakan untuk menghitung kesamaan antar data berdasarkan matriks fitur yang telah direduksi.

## Recomendation Function
"""

def recommend(roomtype, country, city, num_recommendations=10):
    # Normalisasi input untuk pencarian
    roomtype, country, city = map(str.lower, [roomtype, country, city])

    # Filter data berdasarkan input pengguna
    filtered_df = df[
        (df['roomtype'].str.lower() == roomtype) &
        (df['country'].str.lower() == country) &
        (df['city'].str.lower() == city)
    ]

    if filtered_df.empty:
        return "Tidak ada hotel yang sesuai dengan filter yang diberikan."

    # Ambil index dari hotel yang sesuai
    idx_list = filtered_df.index.tolist()
    recommended_hotels = []

    for idx in idx_list:
        try:
            idx_in_similarity = df.index.get_loc(idx)
            similar_hotels = sorted(
                list(enumerate(cosine_sim[idx_in_similarity])),
                key=lambda x: x[1], reverse=True
            )[1:num_recommendations+1]

            # Tambahkan ke hasil rekomendasi
            for hotel_idx, similarity_score in similar_hotels:
                recommended_hotels.append({
                    "hotelname": df.iloc[hotel_idx]['hotelname'],
                    "roomtype": df.iloc[hotel_idx]['roomtype'],
                    "country": df.iloc[hotel_idx]['country'],
                    "city": df.iloc[hotel_idx]['city'],
                    "similarity": round(similarity_score, 2)
                })

        except IndexError:
            continue  # Lewati jika indeks tidak ditemukan

    # Konversi ke DataFrame
    result_df = pd.DataFrame(recommended_hotels).drop_duplicates().head(num_recommendations)

    # Jika tidak ada rekomendasi yang ditemukan berdasarkan kemiripan
    if result_df.empty:
        return "Tidak ada rekomendasi yang ditemukan berdasarkan kemiripan."

    return result_df

"""Menggunakan cosine similarity untuk membangun fungsi rekomendasi berdasarkan tipe kamar, negara, dan kota

# Evaluation
"""

recommend('double room', 'Italy', 'Venice')

"""Untuk evaluasi content-based filtering, digunakan precision@k dalam menentukan apakah rekomendasi relevan atau tidak, dengan rumus sebagai berikut:

$$
\text{Precision@K} = \frac{\text{True Positives (TP)}}{\text{True Positives (TP)} + \text{False Positives (FP)}}
$$


Dari hasil rekomendasi:  

| Hotel Name | Room Type | Relevan? |
|------------|--------------|---------|
| Hotel Antica Fenice | Double Room | TP |
| Hotel Dolomiti | Double or Twin Room | TP |
| Hotel Bartolomeo | Double or Twin Room | TP |
| Hotel Moresco | Double or Twin Room | TP |
| Hotel Tivoli | Double or Twin Room | TP |
| Hotel Falier | Double or Twin Room | TP |
| Hotel Malibran | Standard Double Room | TP |
| Hotel Bartolomeo | Standard Double Room | TP |
| Hotel Malibran | Superior Double Room | TP |
| Hotel Moresco | Superior Double Room | TP |

**Perhitungan:**
$$
\text{Precision@10} = \frac{10}{10 + 0} = \frac{10}{10} = 1.0
$$

**Precision@10 untuk Venice adalah 1.0 atau 100%**, yang menunjukkan bahwa rekomendasi sudah baik, dengan 10 dari 10 hasil relevan dengan permintaan pengguna.
"""

recommend('single', 'Spain', 'Barcelona')

"""$$
\text{Precision@10} = \frac{10}{10 + 0} = \frac{10}{10} = 1.0
$$

**Precision@10 untuk Barcelona adalah 1.0 atau 100%**, yang menunjukkan bahwa rekomendasi sudah baik, dengan 10 dari 10 hasil relevan dengan permintaan pengguna.

### Dapat disimpulkan Fungsi Rekomendasi sudah berjalan sebagaimana mestinya dengan mengembalikan Top-N rekomendasi hotel dengan akurasi presisi relatif di angka 10/10 atau 100%.
"""